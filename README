Extended xv6 Operating System
This project extends the xv6 operating system with additional system calls and scheduling functionalities. The focus is on providing more insights into system and process information, as well as implementing different scheduling algorithms.

New System Calls
1. sysinfo(int param)
Provides information about the system based on the input parameter:

param == 0: Returns the total number of active processes in the system.
param == 1: Returns the total number of system calls made since system boot-up.
param == 2: Returns the number of free memory pages in the system.
Otherwise: Returns an error (-1).
2. procinfo(struct pinfo *in)
Provides information specific to the current process:

'''
struct pinfo {
  int ppid;           // PID of the parent process
  int syscall_count;  // Total number of system calls made by the current process
  int page_usage;     // Current process's memory size in pages
};
Returns 0 on success and -1 otherwise.
'''

3. sched_statistics(void)
Prints statistics for each process, including PID, name, ticket value, and the number of times it has been scheduled to run.

4. sched_tickets(int)
Sets the caller process's ticket value to the given parameter. The maximum number of tickets for each process cannot exceed 10000.

5. clone(void *stack)
Creates a kernel-level thread using the parent's address space. The stack argument specifies the starting address of the user-level stack to be used by the child thread.

Scheduling Algorithms
Lottery Scheduler: Implements a basic lottery scheduling algorithm without ticket transfers or compensation tickets.
Stride Scheduler: Implements a basic stride scheduling algorithm using a large constant K (10000) to compute the stride value.
Testing
To test the new system calls and scheduling functionalities, you can use the following steps:

sysinfo and procinfo:

Call sysinfo() with different parameters to retrieve system information.
Use procinfo() to get information about the current process.
sched_statistics and sched_tickets:

Use sched_tickets() to set the ticket value for a process.
Call sched_statistics() to print the scheduling statistics for each process.
Lottery and Stride Schedulers:

Configure the system to use either the lottery or stride scheduler.
Observe the scheduling behavior and statistics using sched_statistics().
clone:

Create a kernel-level thread using clone() with a specified stack.
Test the functionality of the thread and its interaction with the parent process.
